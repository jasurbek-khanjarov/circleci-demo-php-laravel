version: 2.1
orbs:
  slack: circleci/slack@4.1
  aws-s3: circleci/aws-s3@3.0
jobs:
  test:
    docker:
      - image: cimg/php:8.0.11
      - image: circleci/mysql:8.0.20-ram
        command: mysqld --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_USER: forge
          MYSQL_DATABASE: forge
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_PASSWORD: 'forge'
    resource_class: medium+
    steps:
      - checkout
      - run:
          name: Install MySQL driver
          command: |
            sudo docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd
            sudo docker-php-ext-install zip bcmath pdo_mysql
      - run:
          name: Install Node
          command: |
            curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
            sudo apt-get install -y nodejs

      # Download and cache dependencies

      # composer cache
      - restore_cache:
          keys:
          # "composer.json" can be used if "composer.json"
          # is not committed to the repository.
          - composer-v1-{{ checksum "composer.lock" }}
          # fallback to using the latest cache if no exact match is found
          - composer-v1-
      - run: composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      # node cache
      - restore_cache:
          keys:
            - node-v4-{{ checksum "package.json" }}
            - node-v4-
      - run: npm install
      - save_cache:
          key: node-v4-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn

      # prepare the database
      - run: touch storage/testing.sqlite
      - run: php artisan migrate --env=testing --database=mysql --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      # this example uses codecept but you're not limited to it
      - run: ./vendor/bin/codecept build
      - run: ./vendor/bin/codecept run --xml result.xml
      - store_test_results:
          path: tests/_output
      - store_artifacts:
          path: tests/_output
  build:
    docker:
      - image: 'cimg/php:8.0.11'
    steps:
      - checkout
      - run: php --version
      - run: mkdir bucket && echo "lorem ipsum" > bucket/build_asset.txt
      - aws-s3/sync:
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
          from: bucket
          to: 's3://jasur-test-bucket-08a2b7c2d6e152045/webinar-demo'
      - aws-s3/copy:
          arguments: '--dryrun'
          from: bucket/build_asset.txt
          to: 's3://jasur-test-bucket-08a2b7c2d6e152045/webinar-demo'
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
workflows:
  test-build-and-notify:
    jobs:
    - test
    - build:
        context: demo
        requires:
          - test
    - notify:
        context: demo
        requires:
          - test
          - build
